(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{112:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return r})),t.d(n,"rightToc",(function(){return d})),t.d(n,"default",(function(){return c}));var a=t(1),o=t(7),i=(t(0),t(122)),l={id:"deployment",title:"Deployment",sidebar_label:"Deployment"},r={id:"deployment",title:"Deployment",description:"## Deployment",source:"@site/../docs/deployment.md",permalink:"/docs/deployment",editUrl:"https://github.com/aerogear/OpenVolunteerPlatform/edit/master/website/../docs/deployment.md",sidebar_label:"Deployment",sidebar:"docs",previous:{title:"Integrations",permalink:"/docs/integrations"}},d=[{value:"Deployment",id:"deployment",children:[]},{value:"title: Data Model",id:"title-data-model",children:[]},{value:"Model",id:"model",children:[]},{value:"Primary key",id:"primary-key",children:[]},{value:"Relationships",id:"relationships",children:[{value:"OneToMany",id:"onetomany",children:[]},{value:"OneToOne",id:"onetoone",children:[]},{value:"ManyToMany",id:"manytomany",children:[]}]}],p={rightToc:d};function c(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"deployment"},"Deployment"),Object(i.b)("hr",null),Object(i.b)("p",null,"id: datamodel"),Object(i.b)("h2",{id:"title-data-model"},"title: Data Model"),Object(i.b)("p",null,"Graphback processes your data model to generate a server and client side using best patterns for production ready applications and reduces amount of boilerplate code needed to be added by you.\nDevelopers can focus on data and application requirements by modeling them using a GraphQL SDL."),Object(i.b)("h2",{id:"model"},"Model"),Object(i.b)("p",null,"Graphback operates on GraphQL Schema types annotated with ",Object(i.b)("inlineCode",{parentName:"p"},"@model"),". Refer to ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"../metadata.md"}),"this")," page for complete documentation of ",Object(i.b)("inlineCode",{parentName:"p"},"@model")," and other annotations.\nAdding this annotation to your type will enable Graphback to add additional elements to the schema and generate related code in JavaScript or TypeScript."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),'"""\n@model\n"""\ntype Note {\n  ...\n}\n')),Object(i.b)("h2",{id:"primary-key"},"Primary key"),Object(i.b)("p",null,"Graphback requires your data models to have one primary key field which is used to uniquely represent every object in the database."),Object(i.b)("p",null,"By default Graphback will use ",Object(i.b)("inlineCode",{parentName:"p"},"id: ID")," as the primary key."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),'"""\n@model\n"""\ntype Note {\n  id: ID!\n  ...\n}\n')),Object(i.b)("p",null,"You can set a custom primary key field using the ",Object(i.b)("inlineCode",{parentName:"p"},"@id")," field annotation."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),'"""\n@model\n"""\ntype Note {\n  id: ID!\n  """\n  @id\n  """\n  email: String\n}\n')),Object(i.b)("p",null,"Your data models can also contain custom types that are not Graphback models as shown below.\nHowever, it is expected that you provide the custom resolvers for your custom type as Graphback will not generate one for you."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),'"""\n@model\n"""\ntype Note {\n  id: ID!\n  """\n  @id\n  """\n  email: String\n\n  """\n  Field from a custom type that is not a Graphback model\n  """\n  comments: [Comment]\n}\n\n"""\nA custom type\n"""\ntype Comment {\n  id: ID!\n  text: String\n}\n')),Object(i.b)("h2",{id:"relationships"},"Relationships"),Object(i.b)("p",null,"Graphback provides support for one-to-many and one-to-one relationships."),Object(i.b)("h3",{id:"onetomany"},"OneToMany"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),'"""\n@model\n"""\ntype Note {\n  id: ID!\n  title: String!\n  """\n  @oneToMany field: \'note\'\n  """\n  comments: [Comment]\n}\n')),Object(i.b)("p",null,"This creates a one-to-many relationship between ",Object(i.b)("inlineCode",{parentName:"p"},"Note.comments")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Comment.note"),". If ",Object(i.b)("inlineCode",{parentName:"p"},"Comment.note")," does not exist Graphback will generate it for you, otherwise you can define it yourself."),Object(i.b)("p",null,"By default this maps to ",Object(i.b)("inlineCode",{parentName:"p"},"comment.noteId")," in the underlying data source. Yon can customise this by adding ",Object(i.b)("inlineCode",{parentName:"p"},"key")," to the ",Object(i.b)("inlineCode",{parentName:"p"},"@oneToMany")," annotation:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),'"""\n@model\n"""\ntype Note {\n  id: ID!\n  title: String!\n  """\n  @oneToMany field: \'note\', key: \'note_id\'\n  """\n  comments: [Comment]\n}\n')),Object(i.b)("h3",{id:"onetoone"},"OneToOne"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),'"""\n@model\n"""\ntype Profile {\n  id: ID!\n  """\n  @oneToOne\n  """\n  user: User!\n}\n')),Object(i.b)("p",null,"This creates a one-sided relationship between the ",Object(i.b)("inlineCode",{parentName:"p"},"Profile")," and ",Object(i.b)("inlineCode",{parentName:"p"},"User")," models."),Object(i.b)("p",null,"By default this maps to ",Object(i.b)("inlineCode",{parentName:"p"},"profile.userId")," in the underlying data source. Yon can customise this by adding ",Object(i.b)("inlineCode",{parentName:"p"},"key")," to the ",Object(i.b)("inlineCode",{parentName:"p"},"@oneToOne")," annotation:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),'"""\n@model\n"""\ntype Profile {\n  id: ID!\n  """\n  @oneToOne key: \'user_id\'\n  """\n  user: User!\n}\n')),Object(i.b)("h3",{id:"manytomany"},"ManyToMany"),Object(i.b)("p",null,"To create a many-to-many relationship, add a model for your join table and use two one-to-many relationship mappings to create the relationship."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),'""" \n@model \n"""\ntype Note {\n  id: ID!\n  title: String!\n  description: String\n  """\n  @oneToMany field: \'note\'\n  """\n  authors: [NoteAuthor]\n}\n\n"""\n@model\n"""\ntype NoteAuthor {\n  id: ID!\n}\n\n"""\n@model\n"""\ntype User {\n  id: ID!\n  name: String\n  """\n  @oneToMany field: \'author\'\n  """\n  notes: [NoteAuthor]\n}\n')))}c.isMDXComponent=!0}}]);