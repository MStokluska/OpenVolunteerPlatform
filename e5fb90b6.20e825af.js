(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{118:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var r=n(1),a=n(6),i=(n(0),n(123)),s={id:"subscriptions",title:"Subscriptions"},o={id:"subscriptions",title:"Subscriptions",description:"# Subscriptions",source:"@site/../docs/deployments_subscriptions.md",permalink:"/docs/subscriptions",editUrl:"https://github.com/aerogear/OpenVolunteerPlatform/edit/master/website/../docs/deployments_subscriptions.md",sidebar:"docs",previous:{title:"Out of the box Keycloak based authentication",permalink:"/docs/keycloak-authz"},next:{title:"AMQ Live updates",permalink:"/docs/liveupdates"}},c=[{value:"Configure SubscriptionServer using voyager-subscriptions",id:"configure-subscriptionserver-using-voyager-subscriptions",children:[]},{value:"Configure a Publish Subscribe Mechanism",id:"configure-a-publish-subscribe-mechanism",children:[]},{value:"Procedure",id:"procedure",children:[{value:"Recommended Resources",id:"recommended-resources",children:[]}]}],p={rightToc:c};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"subscriptions"},"Subscriptions"),Object(i.b)("p",null,"To set up subscriptions in OpenVolunteer, these steps must be followed."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Configure SubscriptionServer using voyager-subscriptions"),Object(i.b)("li",{parentName:"ul"},"Configure a Publish Subscribe Mechanism"),Object(i.b)("li",{parentName:"ul"},"Define Subscriptions in the Schema and Implement Subscription Resolvers")),Object(i.b)("h2",{id:"configure-subscriptionserver-using-voyager-subscriptions"},"Configure SubscriptionServer using voyager-subscriptions"),Object(i.b)("p",null,"A typical OpenVolunteer setup without subscriptions is shown below."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const apolloServer = VoyagerServer({\n  typeDefs,\n  resolvers\n})\n\nconst app = express()\napolloServer.applyMiddleware({ app })\n\napp.listen({ port }, () =>\n  console.log(`\ud83d\ude80 Server ready at http://localhost:${port}${apolloServer.graphqlPath}`)\n)\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"@aerogear/voyager-subscriptions")," simplifies the setup of subscriptions and provides integrations with other Voyager packages such as ",Object(i.b)("inlineCode",{parentName:"p"},"@aerogear/voyager-keycloak"),"."),Object(i.b)("p",null,"To set up subscriptions using ",Object(i.b)("inlineCode",{parentName:"p"},"@aerogear/voyager-subscriptions"),", an additional step is needed."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { createSubscriptionServer } = require('@aerogear/voyager-subscriptions')\n\nconst apolloServer = VoyagerServer({\n  typeDefs,\n  resolvers\n})\n\nconst app = express()\napolloServer.applyMiddleware({ app })\n\nconst server = app.listen({ port }, () =>\n  console.log(`\ud83d\ude80 Server ready at http://localhost:${port}${apolloServer.graphqlPath}`)\n\n  createSubscriptionServer({ schema: apolloServer.schema }, {\n    server,\n    path: '/graphql'\n  })\n)\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"createSubscriptionServer")," installs handlers for managing websocket connections and delivering subscriptions on our server. "),Object(i.b)("p",null,"It is a thin wrapper around ",Object(i.b)("inlineCode",{parentName:"p"},"SubscriptionServer")," from the popular ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://npm.im/subscriptions-transport-ws"}),"subscriptions-transport-ws")," module that provides integrations with other voyager modules such as ",Object(i.b)("inlineCode",{parentName:"p"},"@aerogear/voyager-keycloak"),". ",Object(i.b)("inlineCode",{parentName:"p"},"createSubscriptionServer")," returns a ",Object(i.b)("inlineCode",{parentName:"p"},"SubscriptionServer")," instance and it supports all of the same arguments and options."),Object(i.b)("h2",{id:"configure-a-publish-subscribe-mechanism"},"Configure a Publish Subscribe Mechanism"),Object(i.b)("p",null,"Subscriptions depend on a ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern"}),"publish subscribe")," mechanism to generate the events that notify a subscription. There are ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.apollographql.com/docs/apollo-server/features/subscriptions/#pubsub-implementations"}),"several ",Object(i.b)("inlineCode",{parentName:"a"},"PubSub")," implementations")," available based on the ",Object(i.b)("inlineCode",{parentName:"p"},"PubSubEngine")," interface."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { PubSub } = require('apollo-server')\n\nconst pubsub = new PubSub()\n")),Object(i.b)("p",null,"This example uses the default ",Object(i.b)("inlineCode",{parentName:"p"},"PubSub")," provided by ",Object(i.b)("inlineCode",{parentName:"p"},"apollo-server"),". This is an in memory implementation which is useful for prototyping but not suitable for production. We recommend using our ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"npm.im/@aerogear/graphql-mqtt-subscriptions"}),"MQTT PubSub")," in production."),Object(i.b)("h1",{id:"define-subscriptions-in-the-schema-and-implement-subscription-resolvers"},"Define Subscriptions in the Schema and Implement Subscription Resolvers"),Object(i.b)("p",null,"Subscriptions are a root level type. They are defined in the schema similar to ",Object(i.b)("inlineCode",{parentName:"p"},"Query")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Mutation"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"type Subscription {\n  taskCreated: Task\n}\n\ntype Mutation {\n  createTask(title: String!, description: String!): Task\n}\n\ntype Task {\n  id: ID!\n  title: String!\n  description: String!\n}\n")),Object(i.b)("p",null,"Inside our resolver map we add a Subscription resolver that returns an ",Object(i.b)("inlineCode",{parentName:"p"},"AsyncIterator,")," which listens for events.\nTo generate an event, we can use the ",Object(i.b)("inlineCode",{parentName:"p"},"publish")," method on our ",Object(i.b)("inlineCode",{parentName:"p"},"pubsub")," implementation. ",Object(i.b)("inlineCode",{parentName:"p"},"pubsub.publish")," can be called anywhere but it is usually called inside a Mutation resolver. Example: generate an event when a new item was created."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const TASK_CREATED = 'TaskCreated'\n\nconst resolvers = {\n  Subscription: {\n    taskCreated: {\n      subscribe: () => pubSub.asyncIterator(TASK_CREATED)\n    }\n  },\n  Mutation: {\n    createTask: async (obj, args, context, info) => {\n      const task = tasks.create(args)\n      pubSub.publish(TASK_CREATED, { taskCreated: task })\n      return task\n    }\n  },\n}\n")),Object(i.b)("h1",{id:"graphql-mqtt-pubsub-setup"},"GraphQL MQTT PubSub Setup"),Object(i.b)("p",null,"This section specifically describes how to set up an MQTT ",Object(i.b)("inlineCode",{parentName:"p"},"PubSub")," for powering GraphQL subscriptions. For more generic information about PubSub mechanisms, read ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"#configure-a-publish-subscribe-mechanism"}),"Configure a Publish Subscribe Mechanism"),"."),Object(i.b)("p",null,"The ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://npm.im/@aerogear/graphql-mqtt-subscriptions"}),Object(i.b)("inlineCode",{parentName:"a"},"@aerogear/graphql-mqtt-subscriptions"))," module provides an ",Object(i.b)("inlineCode",{parentName:"p"},"AsyncIterator")," interface used for ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"#define-subscriptions-in-the-schema-and-implement-subscription-resolvers"}),"implementing subscription resolvers")," It allows you to connect our GraphQL server to an MQTT broker to support horizontally scalable subscriptions."),Object(i.b)("h2",{id:"procedure"},"Procedure"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Initialize an MQTT client and pass it into this module."),Object(i.b)("li",{parentName:"ul"},"This module provides the ",Object(i.b)("inlineCode",{parentName:"li"},"PubSub")," interface used to implement subscriptions.")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const mqtt = require('mqtt')\nconst { MQTTPubSub } = require('@aerogear/graphql-mqtt-subscriptions')\n\nconst client = mqtt.connect('mqtt://test.mosquitto.org', {\n  reconnectPeriod: 1000,\n})\n\nconst pubsub = new MQTTPubSub({\n  client\n})\n")),Object(i.b)("p",null,"In the example, an mqtt client is created using ",Object(i.b)("inlineCode",{parentName:"p"},"mqtt.connect")," and then this client is passed into an ",Object(i.b)("inlineCode",{parentName:"p"},"MQTTPubSub")," instance. This ",Object(i.b)("inlineCode",{parentName:"p"},"pubsub")," can now be used to publish and to subscribe to events in your GraphQL server."),Object(i.b)("h3",{id:"recommended-resources"},"Recommended Resources"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Read the ",Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.npmjs.com/package/mqtt#connect"}),"documentation for ",Object(i.b)("inlineCode",{parentName:"a"},"mqtt.connect")),"."),Object(i.b)("li",{parentName:"ul"},"Read the ",Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://npmjs.com/package/@aerogear/graphql-mqtt-subscriptions"}),"documentation for MQTTPubSub"))))}b.isMDXComponent=!0},123:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),b=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o({},t,{},e)),n},u=function(e){var t=b(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=b(n),m=r,d=u["".concat(s,".").concat(m)]||u[m]||l[m]||i;return n?a.a.createElement(d,o({ref:t},p,{components:n})):a.a.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);