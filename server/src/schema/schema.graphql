## NOTE: This schema was generated by Graphback and should not be changed manually

enum ActionStatus {
  ASSIGNED
  INPROGRESS
  COMPLETED
}

enum ActionType {
  PHONE_CALL
  DELIVERY
}

""" @model """
type DistributionCentre {
  id: ID!
  name: String
  address: String
  lat: String
  long: String
  version: Int
}

input DistributionCentreInput {
  id: ID
  name: String
  address: String
  lat: String
  long: String
  version: Int
}

type Mutation {
  createDistributionCentre(input: DistributionCentreInput): DistributionCentre!
  updateDistributionCentre(input: DistributionCentreInput): DistributionCentre!
  deleteDistributionCentre(input: DistributionCentreInput): DistributionCentre!
  createVolunteer(input: VolunteerInput): Volunteer!
  updateVolunteer(input: VolunteerInput): Volunteer!
  deleteVolunteer(input: VolunteerInput): Volunteer!
  createVolounteerAction(input: VolounteerActionInput): VolounteerAction!
  updateVolounteerAction(input: VolounteerActionInput): VolounteerAction!
  deleteVolounteerAction(input: VolounteerActionInput): VolounteerAction!
  createReciever(input: RecieverInput): Reciever!
  updateReciever(input: RecieverInput): Reciever!
  deleteReciever(input: RecieverInput): Reciever!
  createTask(input: TaskInput): Task!
  updateTask(input: TaskInput): Task!
  deleteTask(input: TaskInput): Task!
}

type Query {
  findAllDistributionCentres(limit: Int, offset: Int): [DistributionCentre]!
  findDistributionCentres(fields: DistributionCentreInput, limit: Int, offset: Int): [DistributionCentre]!
  findAllVolunteers(limit: Int, offset: Int): [Volunteer]!
  findVolunteers(fields: VolunteerInput, limit: Int, offset: Int): [Volunteer]!
  findAllVolounteerActions(limit: Int, offset: Int): [VolounteerAction]!
  findVolounteerActions(fields: VolounteerActionInput, limit: Int, offset: Int): [VolounteerAction]!
  findAllRecievers(limit: Int, offset: Int): [Reciever]!
  findRecievers(fields: RecieverInput, limit: Int, offset: Int): [Reciever]!
  findAllTasks(limit: Int, offset: Int): [Task]!
  findTasks(fields: TaskInput, limit: Int, offset: Int): [Task]!
}

""" @model """
type Reciever {
  id: ID!
  name: String!
  phone: String
  address: String
  prefferedProducts: [String]

  """@oneToMany field: 'reciever', key: 'recieverId'"""
  actions: [VolounteerAction]
  version: Int
}

input RecieverInput {
  id: ID
  name: String
  phone: String
  address: String
  prefferedProducts: String
  version: Int
}

type Subscription {
  newDistributionCentre(input: DistributionCentreInput): DistributionCentre!
  updatedDistributionCentre(input: DistributionCentreInput): DistributionCentre!
  deletedDistributionCentre(input: DistributionCentreInput): DistributionCentre!
  newVolunteer(input: VolunteerInput): Volunteer!
  updatedVolunteer(input: VolunteerInput): Volunteer!
  deletedVolunteer(input: VolunteerInput): Volunteer!
  newVolounteerAction(input: VolounteerActionInput): VolounteerAction!
  updatedVolounteerAction(input: VolounteerActionInput): VolounteerAction!
  deletedVolounteerAction(input: VolounteerActionInput): VolounteerAction!
  newReciever(input: RecieverInput): Reciever!
  updatedReciever(input: RecieverInput): Reciever!
  deletedReciever(input: RecieverInput): Reciever!
  newTask(input: TaskInput): Task!
  updatedTask(input: TaskInput): Task!
  deletedTask(input: TaskInput): Task!
}

"""@model"""
type Task {
  id: ID!
  title: String!
  description: String!
  status: TaskStatus
  version: Int
}

input TaskInput {
  id: ID
  title: String
  description: String
  status: TaskStatus
  version: Int
}

enum TaskStatus {
  OPEN
  ASSIGNED
  COMPLETE
}

""" @model """
type VolounteerAction {
  id: ID!
  title: String!
  description: String
  products: [String!]!
  status: ActionStatus
  actionType: ActionType

  """@manyToOne field: 'actions', key: 'volounteerId'"""
  volounteer: Volunteer

  """@manyToOne field: 'actions', key: 'recieverId'"""
  reciever: Reciever
  version: Int
}

input VolounteerActionInput {
  id: ID
  title: String
  description: String
  products: String
  status: ActionStatus
  actionType: ActionType
  volounteerId: ID
  recieverId: ID
  version: Int
}

""" @model """
type Volunteer {
  id: ID!
  name: String!

  """@oneToMany field: 'volounteer', key: 'volounteerId'"""
  actions: [VolounteerAction]
  version: Int
}

input VolunteerInput {
  id: ID
  name: String
  version: Int
}
