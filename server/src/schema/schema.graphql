## NOTE: This schema was generated by Graphback and should not be changed manually

""" @model """
type Action {
  id: ID!
  title: String!
  description: String
  status: TaskStatus
  actionType: ActionType

  """@oneToMany field: 'action', key: 'actionId'"""
  products: [Product]!

  """@manyToOne field: 'actions', key: 'volounteerId'"""
  volounteer: Volunteer

  """@manyToOne field: 'actions', key: 'recieverId'"""
  reciever: Reciever
  version: Int
}

input ActionInput {
  id: ID
  title: String
  description: String
  status: TaskStatus
  actionType: ActionType
  volounteerId: ID
  recieverId: ID
  version: Int
}

enum ActionType {
  PHONE_CALL
  DELIVERY
}

""" @model """
type DistributionCentre {
  id: ID!
  name: String
  address: String
  lat: String
  long: String

  """@oneToMany field: 'distributionCentre', key: 'distributionCentreId'"""
  stock: [ProductStock]
  version: Int
}

input DistributionCentreInput {
  id: ID
  name: String
  address: String
  lat: String
  long: String
  version: Int
}

type Mutation {
  createDistributionCentre(input: DistributionCentreInput): DistributionCentre!
  updateDistributionCentre(input: DistributionCentreInput): DistributionCentre!
  deleteDistributionCentre(input: DistributionCentreInput): DistributionCentre!
  createProductStock(input: ProductStockInput): ProductStock!
  updateProductStock(input: ProductStockInput): ProductStock!
  deleteProductStock(input: ProductStockInput): ProductStock!
  createProduct(input: ProductInput): Product!
  updateProduct(input: ProductInput): Product!
  deleteProduct(input: ProductInput): Product!
  createVolunteer(input: VolunteerInput): Volunteer!
  updateVolunteer(input: VolunteerInput): Volunteer!
  deleteVolunteer(input: VolunteerInput): Volunteer!
  createAction(input: ActionInput): Action!
  updateAction(input: ActionInput): Action!
  deleteAction(input: ActionInput): Action!
  createReciever(input: RecieverInput): Reciever!
  updateReciever(input: RecieverInput): Reciever!
  deleteReciever(input: RecieverInput): Reciever!
  createTask(input: TaskInput): Task!
  updateTask(input: TaskInput): Task!
  deleteTask(input: TaskInput): Task!
}

""" @model """
type Product {
  id: ID
  name: String!

  """@manyToOne field: 'products', key: 'actionId'"""
  action: Action
  version: Int
}

input ProductInput {
  id: ID
  name: String
  actionId: ID
  version: Int
}

""" @model """
type ProductStock {
  id: ID!
  amount: String!

  """@oneToOne key: 'productId'"""
  product: Product!

  """@manyToOne field: 'stock', key: 'distributionCentreId'"""
  distributionCentre: DistributionCentre
  version: Int
}

input ProductStockInput {
  id: ID
  productId: ID
  amount: String
  distributionCentreId: ID
  version: Int
}

type Query {
  findAllDistributionCentres(limit: Int, offset: Int): [DistributionCentre]!
  findDistributionCentres(fields: DistributionCentreInput, limit: Int, offset: Int): [DistributionCentre]!
  findAllProductStocks(limit: Int, offset: Int): [ProductStock]!
  findProductStocks(fields: ProductStockInput, limit: Int, offset: Int): [ProductStock]!
  findAllProducts(limit: Int, offset: Int): [Product]!
  findProducts(fields: ProductInput, limit: Int, offset: Int): [Product]!
  findAllVolunteers(limit: Int, offset: Int): [Volunteer]!
  findVolunteers(fields: VolunteerInput, limit: Int, offset: Int): [Volunteer]!
  findAllActions(limit: Int, offset: Int): [Action]!
  findActions(fields: ActionInput, limit: Int, offset: Int): [Action]!
  findAllRecievers(limit: Int, offset: Int): [Reciever]!
  findRecievers(fields: RecieverInput, limit: Int, offset: Int): [Reciever]!
  findAllTasks(limit: Int, offset: Int): [Task]!
  findTasks(fields: TaskInput, limit: Int, offset: Int): [Task]!
}

""" @model """
type Reciever {
  id: ID!
  name: String!
  phone: String
  address: String

  """@oneToMany field: 'reciever', key: 'recieverId'"""
  actions: [Action]
  version: Int
}

input RecieverInput {
  id: ID
  name: String
  phone: String
  address: String
  version: Int
}

type Subscription {
  newDistributionCentre(input: DistributionCentreInput): DistributionCentre!
  updatedDistributionCentre(input: DistributionCentreInput): DistributionCentre!
  deletedDistributionCentre(input: DistributionCentreInput): DistributionCentre!
  newProductStock(input: ProductStockInput): ProductStock!
  updatedProductStock(input: ProductStockInput): ProductStock!
  deletedProductStock(input: ProductStockInput): ProductStock!
  newProduct(input: ProductInput): Product!
  updatedProduct(input: ProductInput): Product!
  deletedProduct(input: ProductInput): Product!
  newVolunteer(input: VolunteerInput): Volunteer!
  updatedVolunteer(input: VolunteerInput): Volunteer!
  deletedVolunteer(input: VolunteerInput): Volunteer!
  newAction(input: ActionInput): Action!
  updatedAction(input: ActionInput): Action!
  deletedAction(input: ActionInput): Action!
  newReciever(input: RecieverInput): Reciever!
  updatedReciever(input: RecieverInput): Reciever!
  deletedReciever(input: RecieverInput): Reciever!
  newTask(input: TaskInput): Task!
  updatedTask(input: TaskInput): Task!
  deletedTask(input: TaskInput): Task!
}

"""@model"""
type Task {
  id: ID!
  title: String!
  description: String!
  status: TaskStatus
  version: Int
}

input TaskInput {
  id: ID
  title: String
  description: String
  status: TaskStatus
  version: Int
}

enum TaskStatus {
  OPEN
  ASSIGNED
  COMPLETE
}

""" @model """
type Volunteer {
  id: ID!
  name: String!

  """@oneToMany field: 'volounteer', key: 'volounteerId'"""
  actions: [Action]
  version: Int
}

input VolunteerInput {
  id: ID
  name: String
  version: Int
}
