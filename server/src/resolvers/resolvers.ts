/*
 * File generated by Graphback CRUD resolver plugin.
 * Content will be overwritten by Graphback generator.
 * To change implementation please disable generator options and supply your own implementation
 * outside generated file.
 */

export default {
  Volunteer: {
    actions: (parent, args, context) => {
      return context.VolounteerAction.batchLoadData(
        "volounteerId",
        parent.id,
        context
      )
    },
  },

  VolounteerAction: {
    volounteer: (parent, args, context) => {
      return context.Volunteer.findBy({ id: parent.volounteerId }).then(
        (results) => results[0]
      )
    },
    reciever: (parent, args, context) => {
      return context.Reciever.findBy({ id: parent.recieverId }).then(
        (results) => results[0]
      )
    },
  },

  Reciever: {
    actions: (parent, args, context) => {
      return context.VolounteerAction.batchLoadData(
        "recieverId",
        parent.id,
        context
      )
    },
  },

  Query: {
    findDistributionCentres: (parent, args, context) => {
      const { fields, ...page } = args
      return context.DistributionCentre.findBy(fields, page)
    },
    findAllDistributionCentres: (parent, args, context) => {
      return context.DistributionCentre.findAll(args)
    },
    findVolunteers: (parent, args, context) => {
      const { fields, ...page } = args
      return context.Volunteer.findBy(fields, page)
    },
    findAllVolunteers: (parent, args, context) => {
      return context.Volunteer.findAll(args)
    },
    findVolounteerActions: (parent, args, context) => {
      const { fields, ...page } = args
      return context.VolounteerAction.findBy(fields, page)
    },
    findAllVolounteerActions: (parent, args, context) => {
      return context.VolounteerAction.findAll(args)
    },
    findRecievers: (parent, args, context) => {
      const { fields, ...page } = args
      return context.Reciever.findBy(fields, page)
    },
    findAllRecievers: (parent, args, context) => {
      return context.Reciever.findAll(args)
    },
  },

  Mutation: {
    createDistributionCentre: (parent, args, context) => {
      return context.DistributionCentre.create(args.input, context)
    },
    createVolunteer: (parent, args, context) => {
      return context.Volunteer.create(args.input, context)
    },
    createVolounteerAction: (parent, args, context) => {
      return context.VolounteerAction.create(args.input, context)
    },
    createReciever: (parent, args, context) => {
      return context.Reciever.create(args.input, context)
    },
  },

  Subscription: {
    newDistributionCentre: {
      subscribe: (parent, args, context) => {
        return context.DistributionCentre.subscribeToCreate(args, context)
      },
    },
    newVolunteer: {
      subscribe: (parent, args, context) => {
        return context.Volunteer.subscribeToCreate(args, context)
      },
    },
    newVolounteerAction: {
      subscribe: (parent, args, context) => {
        return context.VolounteerAction.subscribeToCreate(args, context)
      },
    },
    newReciever: {
      subscribe: (parent, args, context) => {
        return context.Reciever.subscribeToCreate(args, context)
      },
    },
  },
}
